# SLS configuration
# Help copied from https://github.com/Edward-Wu/srt-live-server/wiki/Directives

srt {                
    # worker threads for sls, it is recommended than threads match the count of cpu core.
    worker_threads  1;

    # the max client connection for each worker thread, please set this value according the cpu ability
    worker_connections 300 ;
		
    log_file logs/error.log ; 
    log_level info;
    
    # statistic info url, sls will post the statistic info with it.
    # stat_post_url http://192.168.31.106:8001/sls/stat;
    # stat_post_interval  5;#s

    # the prefix of record hls   
    # vod file name will be: /tmp/mov/sls/$listen/$domain_publisher/$app_publisher/$stream_name/vod.m3u8
    record_hls_path_prefix /tmp/mov/sls;
        
    server {

	# the sls listen port.
        listen 8080; 

        # the net latency of srt. unit:ms
	latency 20; #ms

        # the play url domain name which can be more than one, divided by space , example: live.sls.com live-1.sls.com;
        domain_player live.sls.com live-1.sls.com;

        # the publish url domain name witch mast be single. example: uplive.sls.com;
	domain_publisher uplive.sls.com;
	
        # accept connections at the same time
	backlog 100;

	# the timeout of no data, when timeout the server will discard the client. 
	# unit s, -1 is unlimited, for player and publisher.
	idle_streams_timeout 10;
	
        # the sls post the on_connect and on_close event to the http manager server, the syntax of the post url is like:
        # http://192.168.31.106:8000/sls/on_event?method=on_connect|on_close&role_name=%s&srt_url=%s&remote_ip=%s&remote_ip=%d
        # in the http manager server, we can check the connection through the role name, srt_url, remote ip and remote port,
        # if return not http reponse code 200 OK, the connection will be refused. we also can record the begin time
        # and end time for the connection.
        
	# on_event_url http://192.168.31.106:8000/sls/on_event; #?method=on_connect|on_close&role_name=&srt_url=%s
        
	app {

            # player app name, the srt url is like rtmp's, such as :srt://domain/live/stream_name ;
	    app_player live;           

            # the publisher app name;
	    app_publisher live; 
            
            # the record hls switch, on, off, default is off.
            record_hls off;

            # the dutaion of ts segment, unit s, default is 10s.
	    record_hls_segment_duration 10;
            
            #relay {

		# - the type of relay, support two type: pull, push;
                # type pull;

                # - the relay mode, support two mode: loop, hash;
                # - in the loop mode, sls will loop to connect upstreams url one by one until connection is successfully.
                # - in the hash mode, sls will connect the upstreams server with the url hash.
                # mode loop;

                # - reconnect interval when connection is failed, unit s;
                # reconnect_interval 10;

                # - the timeout of no data, when timeout the server will discard the relay. unit s, -1 is unlimited.
                # idle_streams_timeout -1;

                # - the relay upstream url, if there are more than one, divide with space, such as:
                # - 127.0.0.1:9090?streamid=live.sls.com/live 192.168.1.100:8080/?streamid=live.test.com/live;
                # upstreams 127.0.0.1:9090?streamid=live.sls.com/live 192.168.1.100:8080/?streamid=live.test.com/live;

            #}

	    #relay {
            #    type push;
            #    mode all; #all; hash
            #    reconnect_interval 10;
            #    idle_streams_timeout 10;#s -1: unlimited
            #    upstreams 192.168.31.106:8080?streamid=uplive.sls.com/live ;
            #}          
        }
    }
}
